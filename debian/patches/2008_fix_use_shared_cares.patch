Description: Use system libc-ares
Author: Jérémy Lal <kapouer@melix.org>
Forwarded: not-needed
Last-Update: 2012-01-23

--- a/deps/uv/Makefile
+++ b/deps/uv/Makefile
@@ -26,51 +26,6 @@
 
 CPPFLAGS += -Iinclude -Iinclude/uv-private
 
-CARES_OBJS =
-CARES_OBJS += src/ares/ares__close_sockets.o
-CARES_OBJS += src/ares/ares__get_hostent.o
-CARES_OBJS += src/ares/ares__read_line.o
-CARES_OBJS += src/ares/ares__timeval.o
-CARES_OBJS += src/ares/ares_cancel.o
-CARES_OBJS += src/ares/ares_data.o
-CARES_OBJS += src/ares/ares_destroy.o
-CARES_OBJS += src/ares/ares_expand_name.o
-CARES_OBJS += src/ares/ares_expand_string.o
-CARES_OBJS += src/ares/ares_fds.o
-CARES_OBJS += src/ares/ares_free_hostent.o
-CARES_OBJS += src/ares/ares_free_string.o
-CARES_OBJS += src/ares/ares_gethostbyaddr.o
-CARES_OBJS += src/ares/ares_gethostbyname.o
-CARES_OBJS += src/ares/ares_getnameinfo.o
-CARES_OBJS += src/ares/ares_getopt.o
-CARES_OBJS += src/ares/ares_getsock.o
-CARES_OBJS += src/ares/ares_init.o
-CARES_OBJS += src/ares/ares_library_init.o
-CARES_OBJS += src/ares/ares_llist.o
-CARES_OBJS += src/ares/ares_mkquery.o
-CARES_OBJS += src/ares/ares_nowarn.o
-CARES_OBJS += src/ares/ares_options.o
-CARES_OBJS += src/ares/ares_parse_a_reply.o
-CARES_OBJS += src/ares/ares_parse_aaaa_reply.o
-CARES_OBJS += src/ares/ares_parse_mx_reply.o
-CARES_OBJS += src/ares/ares_parse_ns_reply.o
-CARES_OBJS += src/ares/ares_parse_ptr_reply.o
-CARES_OBJS += src/ares/ares_parse_srv_reply.o
-CARES_OBJS += src/ares/ares_parse_txt_reply.o
-CARES_OBJS += src/ares/ares_process.o
-CARES_OBJS += src/ares/ares_query.o
-CARES_OBJS += src/ares/ares_search.o
-CARES_OBJS += src/ares/ares_send.o
-CARES_OBJS += src/ares/ares_strcasecmp.o
-CARES_OBJS += src/ares/ares_strdup.o
-CARES_OBJS += src/ares/ares_strerror.o
-CARES_OBJS += src/ares/ares_timeout.o
-CARES_OBJS += src/ares/ares_version.o
-CARES_OBJS += src/ares/ares_writev.o
-CARES_OBJS += src/ares/bitncmp.o
-CARES_OBJS += src/ares/inet_net_pton.o
-CARES_OBJS += src/ares/inet_ntop.o
-
 ifneq (,$(findstring MINGW,$(uname_S)))
 include config-mingw.mk
 else
@@ -82,9 +37,6 @@
 
 all: uv.a
 
-$(CARES_OBJS): %.o: %.c
-	$(CC) -o $*.o -c $(CFLAGS) $(CPPFLAGS) $< -DHAVE_CONFIG_H
-
 test/run-tests$(E): test/*.h test/run-tests.c $(RUNNER_SRC) test/runner-unix.c $(TESTS) uv.a
 	$(CC) $(CPPFLAGS) $(RUNNER_CFLAGS) -o test/run-tests test/run-tests.c \
 		test/runner.c $(RUNNER_SRC) $(TESTS) uv.a $(RUNNER_LIBS) $(RUNNER_LINKFLAGS)
--- a/deps/uv/config-unix.mk
+++ b/deps/uv/config-unix.mk
@@ -60,8 +60,8 @@
 EV_CONFIG=config_linux.h
 EIO_CONFIG=config_linux.h
 CSTDFLAG += -D_GNU_SOURCE
-CPPFLAGS += -Isrc/ares/config_linux
-LINKFLAGS+=-lrt
+CPPFLAGS += -I/usr/include
+LINKFLAGS+=-lrt -lc-ares
 OBJS += src/unix/linux.o
 endif
 
@@ -124,8 +124,8 @@
 RUNNER_LIBS=
 RUNNER_SRC=test/runner-unix.c
 
-uv.a: $(OBJS) src/uv-common.o src/unix/ev/ev.o src/unix/uv-eio.o src/unix/eio/eio.o $(CARES_OBJS)
-	$(AR) rcs uv.a $(OBJS) src/uv-common.o src/unix/uv-eio.o src/unix/ev/ev.o src/unix/eio/eio.o $(CARES_OBJS)
+uv.a: $(OBJS) src/uv-common.o src/unix/ev/ev.o src/unix/uv-eio.o src/unix/eio/eio.o
+	$(AR) rcs uv.a $(OBJS) src/uv-common.o src/unix/uv-eio.o src/unix/ev/ev.o src/unix/eio/eio.o
 
 src/unix/%.o: src/unix/%.c include/uv.h include/uv-private/uv-unix.h src/unix/internal.h
 	$(CC) $(CSTDFLAG) $(CPPFLAGS) -Isrc  $(CFLAGS) -c $< -o $@
@@ -150,14 +150,12 @@
 
 
 clean-platform:
-	-rm -f src/ares/*.o
 	-rm -f src/unix/ev/*.o
 	-rm -f src/unix/eio/*.o
 	-rm -f src/unix/*.o
 	-rm -rf test/run-tests.dSYM run-benchmarks.dSYM
 
 distclean-platform:
-	-rm -f src/ares/*.o
 	-rm -f src/unix/ev/*.o
 	-rm -f src/unix/*.o
 	-rm -f src/unix/eio/*.o
--- a/wscript
+++ b/wscript
@@ -441,6 +441,18 @@
   if conf.env["USE_SHARED_ZLIB"] and not sys.platform.startswith("win32"):
     conf.env.append_value("LINKFLAGS", "-lz")
 
+  if conf.env['USE_SHARED_CARES']:
+    cares_includes = [];
+    if o.shared_cares_includes: cares_includes.append(o.shared_cares_includes);
+    cares_libpath = [];
+    if o.shared_cares_libpath: cares_libpath.append(o.shared_cares_libpath);
+    if not conf.check_cxx(lib='cares',
+                          header_name='ares.h',
+                          uselib_store='CARES',
+                          includes=cares_includes,
+                          libpath=cares_libpath):
+      conf.fatal("Cannot find c-ares")
+
   conf.define("HAVE_CONFIG_H", 1)
 
   if sys.platform.startswith("sunos"):
@@ -678,10 +690,6 @@
   bld.install_files('${PREFIX}/include/node/', 'deps/uv/include/*.h')
   bld.install_files('${PREFIX}/include/node/uv-private', 'deps/uv/include/uv-private/*.h')
   bld.install_files('${PREFIX}/include/node/ev', 'deps/uv/src/ev/*.h')
-  bld.install_files('${PREFIX}/include/node/c-ares', """
-    deps/uv/include/ares.h
-    deps/uv/include/ares_version.h
-  """)
 
 
 def build(bld):
@@ -938,7 +946,6 @@
     deps/http_parser
     deps/uv/include
     deps/uv/src/ev
-    deps/uv/src/ares
   """
 
   if not bld.env["USE_SHARED_V8"]: node.includes += ' deps/v8/include '
--- a/deps/uv/src/uv-common.c
+++ b/deps/uv/src/uv-common.c
@@ -27,9 +27,8 @@
 #include <string.h> /* memset */
 
 /* use inet_pton from c-ares if necessary */
-#include "ares_config.h"
-#include "ares/inet_net_pton.h"
-#include "ares/inet_ntop.h"
+#include <ares.h>
+#include <arpa/inet.h>
 
 
 static uv_counters_t counters;
@@ -131,20 +130,20 @@
 
   addr.sin6_family = AF_INET6;
   addr.sin6_port = htons(port);
-  ares_inet_pton(AF_INET6, ip, &addr.sin6_addr);
+  inet_pton(AF_INET6, ip, &addr.sin6_addr);
 
   return addr;
 }
 
 
 int uv_ip4_name(struct sockaddr_in* src, char* dst, size_t size) {
-  const char* d = ares_inet_ntop(AF_INET, &src->sin_addr, dst, size);
+  const char* d = inet_ntop(AF_INET, &src->sin_addr, dst, size);
   return d != dst;
 }
 
 
 int uv_ip6_name(struct sockaddr_in6* src, char* dst, size_t size) {
-  const char* d = ares_inet_ntop(AF_INET6, &src->sin6_addr, dst, size);
+  const char* d = inet_ntop(AF_INET6, &src->sin6_addr, dst, size);
   return d != dst;
 }
 
--- a/deps/uv/include/uv.h
+++ b/deps/uv/include/uv.h
@@ -54,7 +54,7 @@
 #include <stdint.h> /* int64_t */
 #include <sys/types.h> /* size_t */
 
-#include "ares.h"
+#include <ares.h>
 
 #ifndef _SSIZE_T_
 typedef intptr_t ssize_t;
