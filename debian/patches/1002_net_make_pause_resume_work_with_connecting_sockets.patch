From 7d7bca64938f91d44c62279171a082a3be6d6027 Mon Sep 17 00:00:00 2001
From: Bert Belder <bertbelder@gmail.com>
Date: Fri, 3 Aug 2012 15:48:25 +0200
Subject: [PATCH] net: make pause/resume work with connecting sockets

Calling resume() on a net connection for which the IP address is still
being resolved crashes node with an assertion error inside libuv.
Calling pause() before the socket is connected doesn't crash, but it
doesn't work either. This patch fixes it.

Ref: #3118
---
 lib/net.js                                      |  13 ++-
 test/simple/test-net-pause-resume-connecting.js | 101 ++++++++++++++++++++++++
 2 files changed, 110 insertions(+), 4 deletions(-)
 create mode 100644 test/simple/test-net-pause-resume-connecting.js

diff --git a/lib/net.js b/lib/net.js
index 91dcdb7..e66d50f 100644
--- a/lib/net.js
+++ b/lib/net.js
@@ -83,6 +83,7 @@ function initSocketHandle(self) {
 
   self._flags = 0;
   self._connectQueueSize = 0;
+  self._paused = false;
   self.destroyed = false;
   self.errorEmitted = false;
   self.bytesRead = 0;
@@ -201,8 +202,10 @@ Object.defineProperty(Socket.prototype, 'bufferSize', {
 
 
 Socket.prototype.pause = function() {
+  this._paused = true;
+
   if (this._handle) {
-    this._handle.readStop();
+    if (!this._connecting) this._handle.readStop();
 
     // this adds an undesireable boundary crossing for pipe streams.
     // the .unref() method is omitted on TCP streams, because it is
@@ -213,8 +216,10 @@ Socket.prototype.pause = function() {
 
 
 Socket.prototype.resume = function() {
+  this._paused = false;
+
   if (this._handle) {
-    this._handle.readStart();
+    if (!this._connecting) this._handle.readStart();
 
     // this adds an undesireable boundary crossing for pipe streams.
     // the .ref() method is omitted on TCP streams, because it is
@@ -636,7 +641,7 @@ function afterConnect(status, handle, req, readable, writable) {
     self.writable = writable;
     timers.active(self);
 
-    if (self.readable) {
+    if (self.readable && !self._paused) {
       handle.readStart();
     }
 
@@ -867,7 +872,7 @@ function onconnection(clientHandle) {
   });
   socket.readable = socket.writable = true;
 
-  socket.resume();
+  clientHandle.readStart();
 
   self.connections++;
   socket.server = self;
diff --git a/test/simple/test-net-pause-resume-connecting.js b/test/simple/test-net-pause-resume-connecting.js
new file mode 100644
index 0000000..264dc96
--- /dev/null
+++ b/test/simple/test-net-pause-resume-connecting.js
@@ -0,0 +1,101 @@
+// Copyright Joyent, Inc. and other Node contributors.
+//
+// Permission is hereby granted, free of charge, to any person obtaining a
+// copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to permit
+// persons to whom the Software is furnished to do so, subject to the
+// following conditions:
+//
+// The above copyright notice and this permission notice shall be included
+// in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
+// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
+// USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+var common = require('../common'),
+    assert = require('assert'),
+    net = require('net');
+
+var connections = 0,
+    dataEvents = 0,
+    conn;
+
+
+// Server
+var server = net.createServer(function(conn) {
+  connections++;
+  conn.end('This was the year he fell to pieces.');
+
+  if (connections === 5)
+    server.close();
+});
+
+server.listen(common.PORT);
+
+
+// Client 1
+conn = require('net').createConnection(common.PORT, 'localhost');
+conn.resume();
+conn.on('data', onDataOk);
+
+
+// Client 2
+conn = require('net').createConnection(common.PORT, 'localhost');
+conn.pause();
+conn.resume();
+conn.on('data', onDataOk);
+
+
+// Client 3
+conn = require('net').createConnection(common.PORT, 'localhost');
+conn.pause();
+conn.on('data', onDataError);
+scheduleTearDown(conn);
+
+
+// Client 4
+conn = require('net').createConnection(common.PORT, 'localhost');
+conn.resume();
+conn.pause();
+conn.resume();
+conn.on('data', onDataOk);
+
+
+// Client 5
+conn = require('net').createConnection(common.PORT, 'localhost');
+conn.resume();
+conn.resume();
+conn.pause();
+conn.on('data', onDataError);
+scheduleTearDown(conn);
+
+
+// Client helper functions
+function onDataError() {
+  assert(false);
+}
+
+function onDataOk() {
+  dataEvents++;
+}
+
+function scheduleTearDown(conn) {
+  setTimeout(function() {
+    conn.removeAllListeners('data');
+    conn.resume();
+  }, 100);
+}
+
+
+// Exit sanity checks
+process.on('exit', function() {
+  assert.strictEqual(connections, 5);
+  assert.strictEqual(dataEvents, 3);
+});
-- 
1.8.1.6

