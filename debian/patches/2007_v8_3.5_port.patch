Description: Port to v8 3.5.x
 Running node 0.4.12 with v8 3.5 instead of v8 3.1 needs some
 trivial patches: fix 'util.inspect', String::NO_HINTS, and tests expectations.
 Also one less trivial patch without which tests fail.
Origin: https://github.com/joyent/node/commit/59b815b
Forwarded: not-needed
Author: Jérémy Lal <kapouer@melix.org>
Last-Update: 2011-12-05
--- a/test/message/stack_overflow.out
+++ b/test/message/stack_overflow.out
@@ -1,6 +1,6 @@
 before
 
-node.js:134
+node.js:*
         throw e; // process.nextTick error, or 'error' event on first tick
-        ^
+              ^
 RangeError: Maximum call stack size exceeded
--- a/test/message/throw_non_error.out
+++ b/test/message/throw_non_error.out
@@ -1,6 +1,6 @@
 before
 
-node.js:134
+node.js:*
         throw e; // process.nextTick error, or 'error' event on first tick
-        ^
+              ^
 [object Object]
--- a/test/message/undefined_reference_in_new_context.out
+++ b/test/message/undefined_reference_in_new_context.out
@@ -2,7 +2,7 @@
 
 node.js:*
         throw e; // process.nextTick error, or 'error' event on first tick
-        ^
+              ^
 ReferenceError: foo is not defined
     at evalmachine.<anonymous>:*
     at Object.<anonymous> (*test*message*undefined_reference_in_new_context.js:*)
--- a/test/message/throw_custom_error.out
+++ b/test/message/throw_custom_error.out
@@ -1,6 +1,6 @@
 before
 
-node.js:134
+node.js:*
         throw e; // process.nextTick error, or 'error' event on first tick
-        ^
+              ^
 MyCustomError: This is a custom message
--- a/test/simple/test-repl.js
+++ b/test/simple/test-repl.js
@@ -118,7 +118,7 @@
     // invalid input to JSON.parse error is special case of syntax error,
     // should throw
     { client: client_unix, send: 'JSON.parse(\'{invalid: \\\'json\\\'}\');',
-      expect: /^SyntaxError: Unexpected token ILLEGAL/ },
+      expect: /^SyntaxError: Unexpected token i/ },
     // Named functions can be used:
     { client: client_unix, send: 'function blah() { return 1; }',
       expect: prompt_unix },
--- a/lib/util.js
+++ b/lib/util.js
@@ -138,19 +138,18 @@
     var visible_keys = Object.keys(value);
     var keys = showHidden ? Object.getOwnPropertyNames(value) : visible_keys;
 
-    // Functions without properties can be shortcutted.
-    if (typeof value === 'function' && keys.length === 0) {
-      if (isRegExp(value)) {
-        return stylize('' + value, 'regexp');
-      } else {
+    // Some type of object without properties can be shortcutted.
+    if (keys.length === 0) {
+      if (typeof value === 'function') {
         var name = value.name ? ': ' + value.name : '';
         return stylize('[Function' + name + ']', 'special');
       }
-    }
-
-    // Dates without properties can be shortcutted
-    if (isDate(value) && keys.length === 0) {
-      return stylize(value.toUTCString(), 'date');
+      if (isRegExp(value)) {
+        return stylize('' + value, 'regexp');
+      }
+      if (isDate(value)) {
+        return stylize(value.toUTCString(), 'date');
+      }
     }
 
     var base, type, braces;
@@ -166,11 +165,16 @@
     // Make functions say that they are functions
     if (typeof value === 'function') {
       var n = value.name ? ': ' + value.name : '';
-      base = (isRegExp(value)) ? ' ' + value : ' [Function' + n + ']';
+      base = ' [Function' + n + ']';
     } else {
       base = '';
     }
 
+    // Make RegExps say that they are RegExps
+    if (isRegExp(value)) {
+      base = ' ' + value;
+    }
+
     // Make dates with properties first say the date
     if (isDate(value)) {
       base = ' ' + value.toUTCString();
@@ -290,11 +294,8 @@
 
 
 function isDate(d) {
-  if (d instanceof Date) return true;
-  if (typeof d !== 'object') return false;
-  var properties = Date.prototype && Object.getOwnPropertyNames(Date.prototype);
-  var proto = d.__proto__ && Object.getOwnPropertyNames(d.__proto__);
-  return JSON.stringify(proto) === JSON.stringify(properties);
+  return d instanceof Date ||
+    (typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]');
 }
 
 
--- a/src/node_buffer.cc
+++ b/src/node_buffer.cc
@@ -478,7 +478,7 @@
 
   if (written > 0 && p[written-1] == '\0' && char_written == length) {
     uint16_t last_char;
-    s->Write(&last_char, length - 1, 1, String::NO_HINTS);
+    s->Write(&last_char, length - 1, 1, String::NO_OPTIONS);
     if (last_char != 0 || written > s->Utf8Length()) {
       written--;
     }
--- a/test/common.js
+++ b/test/common.js
@@ -75,6 +75,19 @@
     knownGlobals.push(DTRACE_NET_SOCKET_WRITE);
   }
 
+  if (global.ArrayBuffer) {
+    knownGlobals.push(ArrayBuffer);
+    knownGlobals.push(Int8Array);
+    knownGlobals.push(Uint8Array);
+    knownGlobals.push(Int16Array);
+    knownGlobals.push(Uint16Array);
+    knownGlobals.push(Int32Array);
+    knownGlobals.push(Uint32Array);
+    knownGlobals.push(Float32Array);
+    knownGlobals.push(Float64Array);
+    knownGlobals.push(DataView);
+  }
+
   for (var x in global) {
     var found = false;
 
